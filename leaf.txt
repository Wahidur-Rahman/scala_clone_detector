checkPersistence graph Graph gIndex Int iteration Int Unit gIndex + <int> < iteration assert graph vertices getStorageLevel == StorageLevel NONE assert graph edges getStorageLevel == StorageLevel NONE assert graph vertices getStorageLevel == defaultStorageLevel assert graph edges getStorageLevel == defaultStorageLevel AssertionError Exception s <string> + s <string> <string> gIndex + s <string> <string> iteration + s <string> <string> graph vertices getStorageLevel + s <string> <string> graph edges getStorageLevel 
confirmCheckpointRemoved graph Graph Unit hadoopConf graph vertices sparkContext hadoopConfiguration graph getCheckpointFiles foreach checkpointFile path Path checkpointFile fs path getFileSystem hadoopConf assert ! fs exists path <string> 
checkCheckpoint graph Graph gIndex Int iteration Int checkpointInterval Int Unit gIndex % checkpointInterval == <int> iteration - <int> * checkpointInterval < gIndex && gIndex <= iteration assert graph isCheckpointed <string> assert graph getCheckpointFiles length == <int> <string> confirmCheckpointRemoved graph assert ! graph isCheckpointed <string> assert graph getCheckpointFiles isEmpty <string> e AssertionError Exception s <string> + s <string> <string> gIndex + s <string> <string> iteration + s <string> <string> checkpointInterval + s <string> <string> graph isCheckpointed + s <string> <string> graph getCheckpointFiles mkString <string> + s <string> e getMessage 
apply nRows Int nCols Int nIter Int resetProb Double Seq VertexId Double inNbrs Array fill nRows * nCols collection mutable MutableList empty Int outDegree Array fill nRows * nCols <int> r <int> until nRows c <int> until nCols ind sub2ind r c r + <int> < nRows outDegree ind += <int> inNbrs sub2ind r + <int> c += ind <unit> c + <int> < nCols outDegree ind += <int> inNbrs sub2ind r c + <int> += ind <unit> pr Array fill nRows * nCols <double> iter <int> until nIter oldPr pr pr Array Double nRows * nCols ind <int> until nRows * nCols pr ind resetProb + <double> - resetProb * inNbrs ind map nbr oldPr nbr / outDegree nbr sum prSum pr sum <long> until nRows * nCols zip pr map * pr length / prSum 
toEdgePartition EdgePartition ED VD edgeArray edges trim array Sorter Edge edgeArraySortDataFormat ED sort edgeArray <int> edgeArray length Edge lexicographicOrdering localSrcIds Array Int edgeArray length localDstIds Array Int edgeArray length data Array ED edgeArray length index GraphXPrimitiveKeyOpenHashMap VertexId Int global2local GraphXPrimitiveKeyOpenHashMap VertexId Int local2global PrimitiveVector VertexId vertexAttrs Array empty VD edgeArray length > <int> index update edgeArray <int> srcId <int> currSrcId VertexId edgeArray <int> srcId currLocalId <int> i <int> i < edgeArray length srcId edgeArray i srcId dstId edgeArray i dstId localSrcIds i global2local changeValue srcId currLocalId += <int> local2global += srcId currLocalId identity localDstIds i global2local changeValue dstId currLocalId += <int> local2global += dstId currLocalId identity data i edgeArray i attr srcId != currSrcId currSrcId srcId index update currSrcId i <unit> i += <int> vertexAttrs Array VD currLocalId + <int> <unit> EdgePartition localSrcIds localDstIds data index global2local local2global trim array vertexAttrs None 
toEdgePartition EdgePartition ED VD edgeArray edges trim array Sorter EdgeWithLocalIds edgeArraySortDataFormat ED sort edgeArray <int> edgeArray length EdgeWithLocalIds lexicographicOrdering localSrcIds Array Int edgeArray length localDstIds Array Int edgeArray length data Array ED edgeArray length index GraphXPrimitiveKeyOpenHashMap VertexId Int edgeArray length > <int> index update edgeArray <int> srcId <int> currSrcId VertexId edgeArray <int> srcId i <int> i < edgeArray length localSrcIds i edgeArray i localSrcId localDstIds i edgeArray i localDstId data i edgeArray i attr edgeArray i srcId != currSrcId currSrcId edgeArray i srcId index update currSrcId i <unit> i += <int> <unit> EdgePartition localSrcIds localDstIds data index global2local local2global vertexAttrs activeSet 
lexicographicOrdering ED Ordering EdgeWithLocalIds ED Ordering EdgeWithLocalIds ED 
graphx edgeArraySortDataFormat ED SortDataFormat EdgeWithLocalIds ED Array EdgeWithLocalIds ED 
upgrade vertices VertexRDD VD includeSrc Boolean includeDst Boolean Unit shipSrc includeSrc && ! hasSrcId shipDst includeDst && ! hasDstId shipSrc || shipDst shippedVerts RDD Int VertexAttributeBlock VD vertices shipVertexAttributes shipSrc shipDst setName <string> format includeSrc includeDst shipSrc shipDst partitionBy edges partitioner get newEdges edges withPartitionsRDD edges partitionsRDD zipPartitions shippedVerts ePartIter shippedVertsIter ePartIter map pid edgePartition pid edgePartition updateVertices shippedVertsIter flatMap _2 iterator edges newEdges hasSrcId includeSrc hasDstId includeDst <unit> 
withActiveSet actives VertexRDD ReplicatedVertexView VD ED shippedActives actives shipVertexIds setName <string> partitionBy edges partitioner get newEdges edges withPartitionsRDD edges partitionsRDD zipPartitions shippedActives ePartIter shippedActivesIter ePartIter map pid edgePartition pid edgePartition withActiveSet shippedActivesIter flatMap _2 iterator ReplicatedVertexView newEdges hasSrcId hasDstId 
updateVertices updates VertexRDD VD ReplicatedVertexView VD ED shippedVerts updates shipVertexAttributes hasSrcId hasDstId setName <string> format hasSrcId hasDstId partitionBy edges partitioner get newEdges edges withPartitionsRDD edges partitionsRDD zipPartitions shippedVerts ePartIter shippedVertsIter ePartIter map pid edgePartition pid edgePartition updateVertices shippedVertsIter flatMap _2 iterator ReplicatedVertexView newEdges hasSrcId hasDstId 
innerJoin ED2 ClassTag ED3 ClassTag other EdgeRDD ED2 f VertexId VertexId ED ED2 ED3 EdgeRDDImpl ED3 VD ed2Tag classTag ED2 ed3Tag classTag ED3 withPartitionsRDD ED3 VD partitionsRDD zipPartitions other partitionsRDD <boolean> thisIter otherIter pid thisEPart thisIter next otherEPart otherIter next Iterator Tuple2 pid thisEPart innerJoin otherEPart f ed2Tag ed3Tag 
mapEdgePartitions ED2 ClassTag VD2 ClassTag f PartitionID EdgePartition ED VD EdgePartition ED2 VD2 EdgeRDDImpl ED2 VD2 withPartitionsRDD ED2 VD2 partitionsRDD mapPartitions iter iter hasNext pid ep iter next Iterator Tuple2 pid f pid ep Iterator empty preservesPartitioning <boolean> 
partitionBy partitionStrategy PartitionStrategy numPartitions Int Graph VD ED edTag classTag ED vdTag classTag VD newEdges edges withPartitionsRDD edges map e part PartitionID partitionStrategy getPartition e srcId e dstId numPartitions part e srcId e dstId e attr partitionBy HashPartitioner numPartitions mapPartitionsWithIndex pid iter builder EdgePartitionBuilder ED VD edTag vdTag iter foreach message data message _2 builder add data _1 data _2 data _3 edgePartition builder toEdgePartition Iterator pid edgePartition preservesPartitioning <boolean> cache GraphImpl fromExistingRDDs vertices withEdges newEdges newEdges 
mapVertices VD2 ClassTag f VertexId VD VD2 eq VD =:= VD2 <null> Graph VD2 ED eq != <null> vertices cache newVerts vertices mapVertexPartitions map f cache changedVerts vertices asInstanceOf VertexRDD VD2 diff newVerts newReplicatedVertexView replicatedVertexView asInstanceOf ReplicatedVertexView VD2 ED updateVertices changedVerts GraphImpl newVerts newReplicatedVertexView GraphImpl vertices mapVertexPartitions map f replicatedVertexView edges 
subgraph epred EdgeTriplet VD ED Boolean x <boolean> vpred VertexId VD Boolean a b <boolean> Graph VD ED vertices cache newVerts vertices mapVertexPartitions filter vpred replicatedVertexView upgrade vertices <boolean> <boolean> newEdges replicatedVertexView edges filter epred vpred GraphImpl newVerts replicatedVertexView withEdges newEdges 
aggregateMessagesWithActiveSet A ClassTag sendMsg EdgeContext VD ED A Unit mergeMsg A A A tripletFields TripletFields activeSetOpt Option VertexRDD EdgeDirection VertexRDD A vertices cache replicatedVertexView upgrade vertices tripletFields useSrc tripletFields useDst view activeSetOpt Some activeSet replicatedVertexView withActiveSet activeSet None replicatedVertexView activeDirectionOpt activeSetOpt map _2 preAgg view edges partitionsRDD mapPartitions flatMap pid edgePartition activeFraction edgePartition numActives getOrElse <int> / edgePartition indexSize toFloat activeDirectionOpt Some EdgeDirection Both activeFraction < <double> edgePartition aggregateMessagesIndexScan sendMsg mergeMsg tripletFields EdgeActiveness Both edgePartition aggregateMessagesEdgeScan sendMsg mergeMsg tripletFields EdgeActiveness Both Some EdgeDirection Either edgePartition aggregateMessagesEdgeScan sendMsg mergeMsg tripletFields EdgeActiveness Either Some EdgeDirection Out activeFraction < <double> edgePartition aggregateMessagesIndexScan sendMsg mergeMsg tripletFields EdgeActiveness SrcOnly edgePartition aggregateMessagesEdgeScan sendMsg mergeMsg tripletFields EdgeActiveness SrcOnly Some EdgeDirection In edgePartition aggregateMessagesEdgeScan sendMsg mergeMsg tripletFields EdgeActiveness DstOnly edgePartition aggregateMessagesEdgeScan sendMsg mergeMsg tripletFields EdgeActiveness Neither setName <string> vertices aggregateUsingIndex preAgg mergeMsg 
outerJoinVertices U ClassTag VD2 ClassTag other RDD VertexId U updateF VertexId VD Option U VD2 eq VD =:= VD2 <null> Graph VD2 ED eq != <null> vertices cache newVerts vertices leftJoin other updateF cache changedVerts vertices asInstanceOf VertexRDD VD2 diff newVerts newReplicatedVertexView replicatedVertexView asInstanceOf ReplicatedVertexView VD2 ED updateVertices changedVerts GraphImpl newVerts newReplicatedVertexView newVerts vertices leftJoin other updateF GraphImpl newVerts replicatedVertexView edges 
apply VD ClassTag ED ClassTag vertices RDD VertexId VD edges RDD Edge ED defaultVertexAttr VD edgeStorageLevel StorageLevel vertexStorageLevel StorageLevel GraphImpl VD ED edgeRDD EdgeRDD fromEdges edges classTag ED classTag VD withTargetStorageLevel edgeStorageLevel vertexRDD VertexRDD vertices edgeRDD defaultVertexAttr withTargetStorageLevel vertexStorageLevel GraphImpl vertexRDD edgeRDD 
apply VD ClassTag ED ClassTag vertices VertexRDD VD edges EdgeRDD ED GraphImpl VD ED vertices cache newEdges edges asInstanceOf EdgeRDDImpl ED mapEdgePartitions pid part part withoutVertexAttributes VD cache GraphImpl fromExistingRDDs vertices newEdges 
fromEdgeRDD VD ClassTag ED ClassTag edges EdgeRDDImpl ED VD defaultVertexAttr VD edgeStorageLevel StorageLevel vertexStorageLevel StorageLevel GraphImpl VD ED edgesCached edges withTargetStorageLevel edgeStorageLevel cache vertices VertexRDD fromEdges edgesCached edgesCached partitions length defaultVertexAttr withTargetStorageLevel vertexStorageLevel fromExistingRDDs vertices edgesCached 
apply VD ClassTag iter Iterator VertexId VD routingTable RoutingTablePartition defaultVal VD mergeFunc VD VD VD ShippableVertexPartition VD map GraphXPrimitiveKeyOpenHashMap VertexId VD iter foreach pair map setMerge pair _1 pair _2 mergeFunc routingTable iterator foreach vid map changeValue vid defaultVal identity ShippableVertexPartition map keySet map _values map keySet getBitSet routingTable 
shipVertexAttributes shipSrc Boolean shipDst Boolean Iterator PartitionID VertexAttributeBlock VD Iterator tabulate routingTable numEdgePartitions pid initialSize shipSrc && shipDst routingTable partitionSize pid <int> vids PrimitiveVector VertexId initialSize attrs PrimitiveVector VD initialSize routingTable foreachWithinEdgePartition pid shipSrc shipDst vid isDefined vid vids += vid attrs += vid <unit> pid VertexAttributeBlock vids trim array attrs trim array 
shipVertexIds Iterator PartitionID Array VertexId Iterator tabulate routingTable numEdgePartitions pid vids PrimitiveVector VertexId routingTable partitionSize pid routingTable foreachWithinEdgePartition pid <boolean> <boolean> vid isDefined vid vids += vid <unit> pid vids trim array 
minus other VertexRDD VD VertexRDD VD other other VertexRDD partitioner == other partitioner withPartitionsRDD VD partitionsRDD zipPartitions other partitionsRDD preservesPartitioning <boolean> thisIter otherIter thisPart thisIter next otherPart otherIter next Iterator thisPart minus otherPart withPartitionsRDD VD partitionsRDD zipPartitions other partitionBy partitioner get preservesPartitioning <boolean> partIter msgs partIter map minus msgs 
diff other VertexRDD VD VertexRDD VD otherPartition other other VertexRDD partitioner == other partitioner other partitionsRDD VertexRDD other partitionBy partitioner get partitionsRDD newPartitionsRDD partitionsRDD zipPartitions otherPartition preservesPartitioning <boolean> thisIter otherIter thisPart thisIter next otherPart otherIter next Iterator thisPart diff otherPart withPartitionsRDD newPartitionsRDD 
leftZipJoin VD2 ClassTag VD3 ClassTag other VertexRDD VD2 f VertexId VD Option VD2 VD3 VertexRDD VD3 newPartitionsRDD partitionsRDD zipPartitions other partitionsRDD preservesPartitioning <boolean> thisIter otherIter thisPart thisIter next otherPart otherIter next Iterator thisPart leftJoin otherPart f withPartitionsRDD newPartitionsRDD 
leftJoin VD2 ClassTag VD3 ClassTag other RDD VertexId VD2 f VertexId VD Option VD2 VD3 VertexRDD VD3 other other VertexRDD partitioner == other partitioner leftZipJoin other f withPartitionsRDD VD3 partitionsRDD zipPartitions other partitionBy partitioner get preservesPartitioning <boolean> partIter msgs partIter map leftJoin msgs f 
innerZipJoin U ClassTag VD2 ClassTag other VertexRDD U f VertexId VD U VD2 VertexRDD VD2 newPartitionsRDD partitionsRDD zipPartitions other partitionsRDD preservesPartitioning <boolean> thisIter otherIter thisPart thisIter next otherPart otherIter next Iterator thisPart innerJoin otherPart f withPartitionsRDD newPartitionsRDD 
innerJoin U ClassTag VD2 ClassTag other RDD VertexId U f VertexId VD U VD2 VertexRDD VD2 other other VertexRDD partitioner == other partitioner innerZipJoin other f withPartitionsRDD partitionsRDD zipPartitions other partitionBy partitioner get preservesPartitioning <boolean> partIter msgs partIter map innerJoin msgs f 
updateVertices iter Iterator VertexId VD EdgePartition ED VD newVertexAttrs Array VD vertexAttrs length System arraycopy vertexAttrs <int> newVertexAttrs <int> vertexAttrs length iter hasNext kv iter next newVertexAttrs global2local kv _1 kv _2 EdgePartition localSrcIds localDstIds data index global2local local2global newVertexAttrs activeSet 
reverse EdgePartition ED VD builder ExistingEdgePartitionBuilder ED VD global2local local2global vertexAttrs activeSet size i <int> i < size localSrcId localSrcIds i localDstId localDstIds i srcId local2global localSrcId dstId local2global localDstId attr data i builder add dstId srcId localDstId localSrcId attr i += <int> builder toEdgePartition 
map ED2 ClassTag f Edge ED ED2 EdgePartition ED2 VD newData Array ED2 data length edge Edge ED size data length i <int> i < size edge srcId srcIds i edge dstId dstIds i edge attr data i newData i f edge i += <int> withData newData 
map ED2 ClassTag iter Iterator ED2 EdgePartition ED2 VD newData Array ED2 data length i <int> iter hasNext newData i iter next i += <int> assert newData length == i withData newData 
filter epred EdgeTriplet VD ED Boolean vpred VertexId VD Boolean EdgePartition ED VD builder ExistingEdgePartitionBuilder ED VD global2local local2global vertexAttrs activeSet i <int> i < size localSrcId localSrcIds i localDstId localDstIds i et EdgeTriplet VD ED et srcId local2global localSrcId et dstId local2global localDstId et srcAttr vertexAttrs localSrcId et dstAttr vertexAttrs localDstId et attr data i vpred et srcId et srcAttr && vpred et dstId et dstAttr && epred et builder add et srcId et dstId localSrcId localDstId et attr <unit> i += <int> builder toEdgePartition 
groupEdges merge ED ED ED EdgePartition ED VD builder ExistingEdgePartitionBuilder ED VD global2local local2global vertexAttrs activeSet currSrcId VertexId <null> asInstanceOf VertexId currDstId VertexId <null> asInstanceOf VertexId currLocalSrcId <int> currLocalDstId <int> currAttr ED <null> asInstanceOf ED i <int> i < size i > <int> && currSrcId == srcIds i && currDstId == dstIds i currAttr merge currAttr data i i > <int> builder add currSrcId currDstId currLocalSrcId currLocalDstId currAttr <unit> currSrcId srcIds i currDstId dstIds i currLocalSrcId localSrcIds i currLocalDstId localDstIds i currAttr data i i += <int> size > <int> builder add currSrcId currDstId currLocalSrcId currLocalDstId currAttr <unit> builder toEdgePartition 
innerJoin ED2 ClassTag ED3 ClassTag other EdgePartition ED2 f VertexId VertexId ED ED2 ED3 EdgePartition ED3 VD builder ExistingEdgePartitionBuilder ED3 VD global2local local2global vertexAttrs activeSet i <int> j <int> i < size && j < other size srcId srcIds i dstId dstIds i j < other size && other srcIds j < srcId j += <int> j < other size && other srcIds j == srcId j < other size && other srcIds j == srcId && other dstIds j < dstId j += <int> j < other size && other srcIds j == srcId && other dstIds j == dstId builder add srcId dstId localSrcIds i localDstIds i f srcId dstId data i other attrs j <unit> <unit> i += <int> builder toEdgePartition 
iterator Iterator Edge ED Iterator Edge ED edge Edge ED pos <int> 
next EdgeTriplet VD ED triplet EdgeTriplet VD ED localSrcId localSrcIds pos localDstId localDstIds pos triplet srcId local2global localSrcId triplet dstId local2global localDstId includeSrc triplet srcAttr vertexAttrs localSrcId <unit> includeDst triplet dstAttr vertexAttrs localDstId <unit> triplet attr data pos pos += <int> triplet 
tripletIterator includeSrc Boolean <boolean> includeDst Boolean <boolean> Iterator EdgeTriplet VD ED Iterator EdgeTriplet VD ED pos <int> next EdgeTriplet VD ED triplet EdgeTriplet VD ED localSrcId localSrcIds pos localDstId localDstIds pos triplet srcId local2global localSrcId triplet dstId local2global localDstId includeSrc triplet srcAttr vertexAttrs localSrcId <unit> includeDst triplet dstAttr vertexAttrs localDstId <unit> triplet attr data pos pos += <int> triplet  
aggregateMessagesEdgeScan A ClassTag sendMsg EdgeContext VD ED A Unit mergeMsg A A A tripletFields TripletFields activeness EdgeActiveness Iterator VertexId A aggregates Array A vertexAttrs length bitset BitSet vertexAttrs length ctx AggregatingEdgeContext VD ED A mergeMsg aggregates bitset i <int> i < size localSrcId localSrcIds i srcId local2global localSrcId localDstId localDstIds i dstId local2global localDstId edgeIsActive activeness == EdgeActiveness Neither <boolean> activeness == EdgeActiveness SrcOnly isActive srcId activeness == EdgeActiveness DstOnly isActive dstId activeness == EdgeActiveness Both isActive srcId && isActive dstId activeness == EdgeActiveness Either isActive srcId || isActive dstId Exception <string> edgeIsActive srcAttr tripletFields useSrc vertexAttrs localSrcId <null> asInstanceOf VD dstAttr tripletFields useDst vertexAttrs localDstId <null> asInstanceOf VD ctx set srcId dstId localSrcId localDstId srcAttr dstAttr data i sendMsg ctx <unit> i += <int> bitset iterator map localId local2global localId aggregates localId 
aggregateMessagesIndexScan A ClassTag sendMsg EdgeContext VD ED A Unit mergeMsg A A A tripletFields TripletFields activeness EdgeActiveness Iterator VertexId A aggregates Array A vertexAttrs length bitset BitSet vertexAttrs length ctx AggregatingEdgeContext VD ED A mergeMsg aggregates bitset index iterator foreach cluster clusterSrcId cluster _1 clusterPos cluster _2 clusterLocalSrcId localSrcIds clusterPos scanCluster activeness == EdgeActiveness Neither <boolean> activeness == EdgeActiveness SrcOnly isActive clusterSrcId activeness == EdgeActiveness DstOnly <boolean> activeness == EdgeActiveness Both isActive clusterSrcId activeness == EdgeActiveness Either <boolean> Exception <string> scanCluster pos clusterPos srcAttr tripletFields useSrc vertexAttrs clusterLocalSrcId <null> asInstanceOf VD ctx setSrcOnly clusterSrcId clusterLocalSrcId srcAttr pos < size && localSrcIds pos == clusterLocalSrcId localDstId localDstIds pos dstId local2global localDstId edgeIsActive activeness == EdgeActiveness Neither <boolean> activeness == EdgeActiveness SrcOnly <boolean> activeness == EdgeActiveness DstOnly isActive dstId activeness == EdgeActiveness Both isActive dstId activeness == EdgeActiveness Either isActive clusterSrcId || isActive dstId Exception <string> edgeIsActive dstAttr tripletFields useDst vertexAttrs localDstId <null> asInstanceOf VD ctx setRest dstId localDstId dstAttr data pos sendMsg ctx <unit> pos += <int> <unit> bitset iterator map localId local2global localId aggregates localId 
set srcId VertexId dstId VertexId localSrcId Int localDstId Int srcAttr VD dstAttr VD attr ED Unit _srcId srcId _dstId dstId _localSrcId localSrcId _localDstId localDstId _srcAttr srcAttr _dstAttr dstAttr _attr attr 
filter pred VertexId VD Boolean Self VD newMask BitSet self capacity i self mask nextSetBit <int> i >= <int> pred self index getValue i self values i newMask set i <unit> i self mask nextSetBit i + <int> withMask newMask 
diff other Self VD Self VD self index != other index logWarning <string> diff createUsingIndex other iterator newMask self mask & other mask i newMask nextSetBit <int> i >= <int> self values i == other values i newMask unset i <unit> i newMask nextSetBit i + <int> withValues other values withMask newMask 
leftJoin VD2 ClassTag VD3 ClassTag other Self VD2 f VertexId VD Option VD2 VD3 Self VD3 self index != other index logWarning <string> leftJoin createUsingIndex other iterator f newValues Array VD3 self capacity i self mask nextSetBit <int> i >= <int> otherV Option VD2 other mask get i Some other values i None newValues i f self index getValue i self values i otherV i self mask nextSetBit i + <int> withValues newValues 
innerJoin U ClassTag VD2 ClassTag other Self U f VertexId VD U VD2 Self VD2 self index != other index logWarning <string> innerJoin createUsingIndex other iterator f newMask self mask & other mask newValues Array VD2 self capacity i newMask nextSetBit <int> i >= <int> newValues i f self index getValue i self values i other values i i newMask nextSetBit i + <int> withValues newValues withMask newMask 
createUsingIndex VD2 ClassTag iter Iterator Product2 VertexId VD2 Self VD2 newMask BitSet self capacity newValues Array VD2 self capacity iter foreach pair pos self index getPos pair _1 pos >= <int> newMask set pos newValues pos pair _2 <unit> withValues newValues withMask newMask 
innerJoinKeepLeft iter Iterator Product2 VertexId VD Self VD newMask BitSet self capacity newValues Array VD self capacity System arraycopy self values <int> newValues <int> newValues length iter foreach pair pos self index getPos pair _1 pos >= <int> newMask set pos newValues pos pair _2 <unit> withValues newValues withMask newMask 
aggregateUsingIndex VD2 ClassTag iter Iterator Product2 VertexId VD2 reduceFunc VD2 VD2 VD2 Self VD2 newMask BitSet self capacity newValues Array VD2 self capacity iter foreach product vid product _1 vdata product _2 pos self index getPos vid pos >= <int> newMask get pos newValues pos reduceFunc newValues pos vdata newMask set pos newValues pos vdata <unit> withValues newValues withMask newMask 
edgePartitionToMsgs pid PartitionID edgePartition EdgePartition Iterator RoutingTableMessage map GraphXPrimitiveKeyOpenHashMap VertexId Byte edgePartition iterator foreach e map changeValue e srcId <int> b Byte b | <int> toByte map changeValue e dstId <int> b Byte b | <int> toByte map iterator map vidAndPosition vid vidAndPosition _1 position vidAndPosition _2 toMessage vid pid position 
fromMsgs numEdgePartitions Int iter Iterator RoutingTableMessage RoutingTablePartition pid2vid Array fill numEdgePartitions PrimitiveVector VertexId srcFlags Array fill numEdgePartitions PrimitiveVector Boolean dstFlags Array fill numEdgePartitions PrimitiveVector Boolean msg iter vid vidFromMessage msg pid pidFromMessage msg position positionFromMessage msg pid2vid pid += vid srcFlags pid += position & <int> != <int> dstFlags pid += position & <int> != <int> RoutingTablePartition pid2vid zipWithIndex map vids pid vids trim array toBitSet srcFlags pid toBitSet dstFlags pid 
toBitSet flags PrimitiveVector Boolean BitSet bitset BitSet flags size i <int> i < flags size flags i bitset set i <unit> i += <int> bitset 
foreachWithinEdgePartition pid PartitionID includeSrc Boolean includeDst Boolean f VertexId Unit Unit vidsCandidate srcVids dstVids routingTable pid size vidsCandidate length includeSrc && includeDst vidsCandidate iterator foreach f ! includeSrc && ! includeDst relevantVids includeSrc srcVids dstVids relevantVids iterator foreach i f vidsCandidate i 
apply VD ClassTag vertices RDD VertexId VD edges EdgeRDD defaultVal VD mergeFunc VD VD VD VertexRDD VD vPartitioned RDD VertexId VD vertices partitioner Some p vertices None vertices partitionBy HashPartitioner vertices partitions length routingTables createRoutingTables edges vPartitioned partitioner get vertexPartitions vPartitioned zipPartitions routingTables preservesPartitioning <boolean> vertexIter routingTableIter routingTable routingTableIter hasNext routingTableIter next RoutingTablePartition empty Iterator ShippableVertexPartition vertexIter routingTable defaultVal mergeFunc VertexRDDImpl vertexPartitions 
graphx createRoutingTables edges EdgeRDD vertexPartitioner Partitioner RDD RoutingTablePartition vid2pid edges partitionsRDD mapPartitions flatMap Function tupled RoutingTablePartition edgePartitionToMsgs setName <string> numEdgePartitions edges partitions length vid2pid partitionBy vertexPartitioner mapPartitions iter Iterator RoutingTablePartition fromMsgs numEdgePartitions iter preservesPartitioning <boolean> 
apply VD ClassTag ED ClassTag A ClassTag graph Graph VD ED initialMsg A maxIterations Int Int MaxValue activeDirection EdgeDirection EdgeDirection Either vprog VertexId VD A VD sendMsg EdgeTriplet VD ED Iterator VertexId A mergeMsg A A A Graph VD ED require maxIterations > <int> s <string> + s <string> maxIterations checkpointInterval graph vertices sparkContext getConf getInt <string> <int> g graph mapVertices vid vdata vprog vid vdata initialMsg graphCheckpointer PeriodicGraphCheckpointer VD ED checkpointInterval graph vertices sparkContext graphCheckpointer update g messages GraphXUtils mapReduceTriplets g sendMsg mergeMsg messageCheckpointer PeriodicRDDCheckpointer VertexId A checkpointInterval graph vertices sparkContext messageCheckpointer update messages asInstanceOf RDD VertexId A activeMessages messages count prevG Graph VD ED <null> i <int> activeMessages > <int> && i < maxIterations prevG g g g joinVertices messages vprog graphCheckpointer update g oldMessages messages messages GraphXUtils mapReduceTriplets g sendMsg mergeMsg Some oldMessages activeDirection messageCheckpointer update messages asInstanceOf RDD VertexId A activeMessages messages count logInfo <string> + i oldMessages unpersist prevG unpersistVertices prevG edges unpersist i += <int> messageCheckpointer unpersistDataSet graphCheckpointer deleteAllCheckpoints messageCheckpointer deleteAllCheckpoints g 
setMerge k K v V mergeF V V V Unit pos keySet addWithoutResize k ind pos & OpenHashSet POSITION_MASK pos & OpenHashSet NONEXISTENCE_MASK != <int> _values ind v _values ind mergeF _values ind v keySet rehashIfNeeded k grow move _oldValues <null> 
changeValue k K defaultValue V mergeValue V V V pos keySet addWithoutResize k pos & OpenHashSet NONEXISTENCE_MASK != <int> newValue defaultValue _values pos & OpenHashSet POSITION_MASK newValue keySet rehashIfNeeded k grow move newValue _values pos mergeValue _values pos _values pos 
iterator Iterator K V Iterator K V pos <int> nextPair K V computeNextPair 
invokedMethod closure AnyRef targetClass Class targetMethod String Boolean _invokedMethod closure getClass <string> targetClass targetMethod <boolean> f closure getClass getDeclaredFields f getType getName startsWith <string> f setAccessible <boolean> invokedMethod f get closure targetClass targetMethod <boolean> <unit> <boolean> 
_invokedMethod cls Class method String targetClass Class targetMethod String Boolean seen HashSet Class String stack List Class String cls method stack nonEmpty c m stack head stack stack tail seen add c m finder MethodInvocationFinder c getName m getClassReader c accept finder <int> classMethod finder methodsInvoked classMethod _1 == targetClass && classMethod _2 == targetMethod <boolean> ! seen contains classMethod stack classMethod :: stack <unit> <boolean> 
getClassReader cls Class ClassReader className cls getName replaceFirst <string> + <string> resourceStream cls getResourceAsStream className resourceStream == <null> ClassReader resourceStream <unit> baos ByteArrayOutputStream <int> Utils copyStream resourceStream baos <boolean> ClassReader ByteArrayInputStream baos toByteArray 
visitMethod access Int name String desc String sig String exceptions Array String MethodVisitor name == methodName MethodVisitor ASM7 <null> 
persist data Graph VD ED Unit data vertices getStorageLevel == StorageLevel NONE data vertices cache <unit> data edges getStorageLevel == StorageLevel NONE data edges cache <unit> 
logNormalGraph sc SparkContext numVertices Int numEParts Int <int> mu Double <double> sigma Double <double> seed Long <int> Graph Long Int evalNumEParts numEParts == <int> sc defaultParallelism numEParts seedRand seed == <int> Random Random seed seed1 seedRand nextInt seed2 seedRand nextInt vertices RDD VertexId Long sc parallelize <int> until numVertices evalNumEParts map src src sampleLogNormal mu sigma numVertices seed seed1 ^ src edges vertices flatMap src degree generateRandomEdges src toInt degree toInt numVertices seed seed2 ^ src Graph vertices edges <int> 
spark sampleLogNormal mu Double sigma Double maxVal Int seed Long <int> Int rand seed == <int> Random Random seed sigmaSq sigma * sigma m math exp mu + sigmaSq / <double> s math sqrt math expm1 sigmaSq * math exp <int> * mu + sigmaSq X Double maxVal X >= maxVal Z rand nextGaussian X math exp mu + sigma * Z math floor X toInt 
rmatGraph sc SparkContext requestedNumVertices Int numEdges Int Graph Int Int numVertices math round math pow <double> math ceil math log requestedNumVertices / math log <double> toInt numEdgesUpperBound math pow <double> <int> * math log numVertices / math log <double> - <int> toInt numEdgesUpperBound < numEdges IllegalArgumentException s <string> <string> numEdgesUpperBound numEdges <unit> edges mutable Set empty Edge Int edges size < numEdges edges size % <int> == <int> logDebug edges size + <string> <unit> edges += addEdge numVertices outDegreeFromEdges sc parallelize edges toList 
tailrec chooseCell x Int y Int t Int Int Int t <= <int> x y newT math round t toFloat / <double> toInt pickQuadrant RMATa RMATb RMATc RMATd <int> chooseCell x y newT <int> chooseCell x + newT y newT <int> chooseCell x y + newT newT <int> chooseCell x + newT y + newT newT 
pickQuadrant a Double b Double c Double d Double Int a + b + c + d != <double> IllegalArgumentException <string> + a + b + c + d + <string> <unit> rand Random result rand nextDouble result x x < a <int> x x >= a && x < a + b <int> x x >= a + b && x < a + b + c <int> <int> 
gridGraph sc SparkContext rows Int cols Int Graph Int Int Double vertices RDD VertexId Int Int sc parallelize <int> until rows flatMap r <int> until cols map c sub2ind r c r c edges RDD Edge Double vertices flatMap vid r c r + <int> < rows Seq sub2ind r c sub2ind r + <int> c Seq empty ++ c + <int> < cols Seq sub2ind r c sub2ind r c + <int> Seq empty map src dst Edge src dst <double> Graph vertices edges 
graphx edgeArraySortDataFormat ED SortDataFormat Edge ED Array Edge ED 
getPartition src VertexId dst VertexId numParts PartitionID PartitionID ceilSqrtNumParts PartitionID math ceil math sqrt numParts toInt mixingPrime VertexId <long> numParts == ceilSqrtNumParts * ceilSqrtNumParts col PartitionID math abs src * mixingPrime % ceilSqrtNumParts toInt row PartitionID math abs dst * mixingPrime % ceilSqrtNumParts toInt col * ceilSqrtNumParts + row % numParts cols ceilSqrtNumParts rows numParts + cols - <int> / cols lastColRows numParts - rows * cols - <int> col math abs src * mixingPrime % numParts / rows toInt row math abs dst * mixingPrime % col < cols - <int> rows lastColRows toInt col * rows + row 
registerKryoClasses conf SparkConf Unit conf registerKryoClasses Array classOf Edge Object classOf VertexId Object classOf EdgePartition Object Object classOf BitSet classOf VertexIdToIndexMap classOf VertexAttributeBlock Object classOf PartitionStrategy classOf BoundedPriorityQueue Object classOf EdgeDirection classOf GraphXPrimitiveKeyOpenHashMap VertexId Int classOf OpenHashSet Int classOf OpenHashSet Long 
sendMsg ctx EdgeContext VD ED A Unit mapFunc ctx toEdgeTriplet foreach kv id kv _1 msg kv _2 id == ctx srcId ctx sendToSrc msg assert id == ctx dstId ctx sendToDst msg 
graphx mapReduceTriplets VD ClassTag ED ClassTag A ClassTag g Graph VD ED mapFunc EdgeTriplet VD ED Iterator VertexId A reduceFunc A A A activeSetOpt Option VertexRDD EdgeDirection None VertexRDD A sendMsg ctx EdgeContext VD ED A Unit mapFunc ctx toEdgeTriplet foreach kv id kv _1 msg kv _2 id == ctx srcId ctx sendToSrc msg assert id == ctx dstId ctx sendToDst msg  
fromEdgeTuples VD ClassTag rawEdges RDD VertexId VertexId defaultValue VD uniqueEdges Option PartitionStrategy None edgeStorageLevel StorageLevel StorageLevel MEMORY_ONLY vertexStorageLevel StorageLevel StorageLevel MEMORY_ONLY Graph VD Int edges rawEdges map p Edge p _1 p _2 <int> graph GraphImpl edges defaultValue edgeStorageLevel vertexStorageLevel uniqueEdges Some p graph partitionBy p groupEdges a b a + b None graph 
collectNeighborIds edgeDirection EdgeDirection VertexRDD Array VertexId nbrs edgeDirection == EdgeDirection Either graph aggregateMessages Array VertexId ctx ctx sendToSrc Array ctx dstId ctx sendToDst Array ctx srcId ++ TripletFields None edgeDirection == EdgeDirection Out graph aggregateMessages Array VertexId ctx ctx sendToSrc Array ctx dstId ++ TripletFields None edgeDirection == EdgeDirection In graph aggregateMessages Array VertexId ctx ctx sendToDst Array ctx srcId ++ TripletFields None SparkException <string> + <string> graph vertices leftZipJoin nbrs vid vdata nbrsOpt nbrsOpt getOrElse Array empty VertexId 
collectNeighbors edgeDirection EdgeDirection VertexRDD Array VertexId VD nbrs edgeDirection EdgeDirection Either graph aggregateMessages Array VertexId VD ctx ctx sendToSrc Array ctx dstId ctx dstAttr ctx sendToDst Array ctx srcId ctx srcAttr a b a ++ b TripletFields All EdgeDirection In graph aggregateMessages Array VertexId VD ctx ctx sendToDst Array ctx srcId ctx srcAttr a b a ++ b TripletFields Src EdgeDirection Out graph aggregateMessages Array VertexId VD ctx ctx sendToSrc Array ctx dstId ctx dstAttr a b a ++ b TripletFields Dst EdgeDirection Both SparkException <string> + <string> graph vertices leftJoin nbrs vid vdata nbrsOpt nbrsOpt getOrElse Array empty VertexId VD 
collectEdges edgeDirection EdgeDirection VertexRDD Array Edge ED edgeDirection EdgeDirection Either graph aggregateMessages Array Edge ED ctx ctx sendToSrc Array Edge ctx srcId ctx dstId ctx attr ctx sendToDst Array Edge ctx srcId ctx dstId ctx attr a b a ++ b TripletFields EdgeOnly EdgeDirection In graph aggregateMessages Array Edge ED ctx ctx sendToDst Array Edge ctx srcId ctx dstId ctx attr a b a ++ b TripletFields EdgeOnly EdgeDirection Out graph aggregateMessages Array Edge ED ctx ctx sendToSrc Array Edge ctx srcId ctx dstId ctx attr a b a ++ b TripletFields EdgeOnly EdgeDirection Both SparkException <string> + <string> 
pickRandomVertex VertexId probability <double> / graph numVertices found <boolean> retVal VertexId <null> asInstanceOf VertexId ! found selectedVertices graph vertices flatMap vidVvals Random nextDouble < probability Some vidVvals _1 None selectedVertices count > <int> found <boolean> collectedVertices selectedVertices collect retVal collectedVertices Random nextInt collectedVertices length <unit> retVal 
convertToCanonicalEdges mergeFunc ED ED ED e1 e2 e1 Graph VD ED newEdges graph edges map e e srcId < e dstId e srcId e dstId e attr e e dstId e srcId e attr reduceByKey mergeFunc map e Edge e _1 _1 e _1 _2 e _2 Graph graph vertices newEdges 
run VD ED ClassTag graph Graph VD ED maxSteps Int Graph VertexId ED require maxSteps > <int> s <string> maxSteps lpaGraph graph mapVertices vid vid initialMessage Map VertexId Long Pregel lpaGraph initialMessage maxIterations maxSteps vprog vertexProgram sendMsg sendMessage mergeMsg mergeMessage 
run VD ED ClassTag graph Graph VD ED landmarks Seq VertexId Graph SPMap ED spGraph graph mapVertices vid attr landmarks contains vid makeMap vid -> <int> makeMap initialMessage makeMap Pregel spGraph initialMessage vertexProgram sendMessage addMaps 
sendMsgTrainF conf Conf u Double ctx EdgeContext Array Double Array Double Double Double Double Array Double Array Double Double Unit usr itm ctx srcAttr ctx dstAttr p q usr _1 itm _1 rank p length pred u + usr _3 + itm _3 + blas ddot rank q <int> usr _2 <int> pred math max pred conf minVal pred math min pred conf maxVal err ctx attr - pred updateP q clone blas dscal rank err * conf gamma2 updateP <int> blas daxpy rank - conf gamma7 * conf gamma2 p <int> updateP <int> updateQ usr _2 clone blas dscal rank err * conf gamma2 updateQ <int> blas daxpy rank - conf gamma7 * conf gamma2 q <int> updateQ <int> updateY q clone blas dscal rank err * usr _4 * conf gamma2 updateY <int> blas daxpy rank - conf gamma7 * conf gamma2 itm _2 <int> updateY <int> ctx sendToSrc updateP updateY err - conf gamma6 * usr _3 * conf gamma1 ctx sendToDst updateQ updateY err - conf gamma6 * itm _3 * conf gamma1 
run edges RDD Edge Double conf Conf Graph Array Double Array Double Double Double Double Double require conf maxIters > <int> s <string> + s <string> conf maxIters require conf maxVal > conf minVal s <string> + s <string> <string> <string> conf maxVal conf minVal edges cache rs rc edges map e e attr <long> fold <int> <int> a b a _1 + b _1 a _2 + b _2 u rs / rc g Graph fromEdges edges defaultF conf rank cache materialize g edges unpersist t0 g aggregateMessages Long Double ctx ctx sendToSrc <long> ctx attr ctx sendToDst <long> ctx attr g1 g2 g1 _1 + g2 _1 g1 _2 + g2 _2 gJoinT0 g outerJoinVertices t0 vid VertexId vd Array Double Array Double Double Double msg Option Long Double vd _1 vd _2 msg get _2 / msg get _1 - u <double> / scala math sqrt msg get _1 cache materialize gJoinT0 g unpersist g gJoinT0 sendMsgTrainF conf Conf u Double ctx EdgeContext Array Double Array Double Double Double Double Array Double Array Double Double Unit usr itm ctx srcAttr ctx dstAttr p q usr _1 itm _1 rank p length pred u + usr _3 + itm _3 + blas ddot rank q <int> usr _2 <int> pred math max pred conf minVal pred math min pred conf maxVal err ctx attr - pred updateP q clone blas dscal rank err * conf gamma2 updateP <int> blas daxpy rank - conf gamma7 * conf gamma2 p <int> updateP <int> updateQ usr _2 clone blas dscal rank err * conf gamma2 updateQ <int> blas daxpy rank - conf gamma7 * conf gamma2 q <int> updateQ <int> updateY q clone blas dscal rank err * usr _4 * conf gamma2 updateY <int> blas daxpy rank - conf gamma7 * conf gamma2 itm _2 <int> updateY <int> ctx sendToSrc updateP updateY err - conf gamma6 * usr _3 * conf gamma1 ctx sendToDst updateQ updateY err - conf gamma6 * itm _3 * conf gamma1  
runWithOptions VD ClassTag ED ClassTag graph Graph VD ED numIter Int resetProb Double <double> srcId Option VertexId None Graph Double Double require numIter > <int> s <string> + s <string> numIter require resetProb >= <int> && resetProb <= <int> s <string> + s <string> resetProb personalized srcId isDefined src VertexId srcId getOrElse <long> rankGraph Graph Double Double graph outerJoinVertices graph outDegrees vid vdata deg deg getOrElse <int> mapTriplets e <double> / e srcAttr TripletFields Src mapVertices id attr ! id != src && personalized <double> <double> iteration <int> prevRankGraph Graph Double Double <null> iteration < numIter rankGraph cache rankUpdates rankGraph aggregateMessages Double ctx ctx sendToDst ctx srcAttr * ctx attr + TripletFields Src prevRankGraph rankGraph rPrb personalized src VertexId id VertexId resetProb * delta src id src VertexId id VertexId resetProb rankGraph rankGraph outerJoinVertices rankUpdates id oldRank msgSumOpt rPrb src id + <double> - resetProb * msgSumOpt getOrElse <double> cache rankGraph edges foreachPartition x logInfo s <string> <string> iteration prevRankGraph vertices unpersist prevRankGraph edges unpersist iteration += <int> normalizeRankSum rankGraph personalized 
runParallelPersonalizedPageRank VD ClassTag ED ClassTag graph Graph VD ED numIter Int resetProb Double <double> sources Array VertexId Graph Vector Double require numIter > <int> s <string> + s <string> numIter require resetProb >= <int> && resetProb <= <int> s <string> + s <string> resetProb require sources nonEmpty s <string> + s <string> sources mkString <string> <string> <string> zero Vectors sparse sources size List asBreeze sourcesInitMap sources zipWithIndex map vid i v Vectors sparse sources size Array i Array <double> asBreeze vid v toMap sc graph vertices sparkContext sourcesInitMapBC sc broadcast sourcesInitMap rankGraph graph outerJoinVertices graph outDegrees vid vdata deg deg getOrElse <int> mapTriplets e <double> / e srcAttr TripletFields Src mapVertices vid sourcesInitMapBC value getOrElse vid zero i <int> i < numIter prevRankGraph rankGraph rankUpdates rankGraph aggregateMessages BV Double ctx ctx sendToDst ctx srcAttr *:* ctx attr a BV Double b BV Double a +:+ b TripletFields Src rankGraph rankGraph outerJoinVertices rankUpdates vid oldRank msgSumOpt popActivations BV Double msgSumOpt getOrElse zero *:* <double> - resetProb resetActivations sourcesInitMapBC value contains vid sourcesInitMapBC value vid *:* resetProb zero popActivations +:+ resetActivations cache rankGraph edges foreachPartition prevRankGraph vertices unpersist prevRankGraph edges unpersist logInfo s <string> <string> i i += <int> rankSums rankGraph vertices values fold zero +:+ rankGraph mapVertices vid attr Vectors fromBreeze attr /:/ rankSums 
runUntilConvergenceWithOptions VD ClassTag ED ClassTag graph Graph VD ED tol Double resetProb Double <double> srcId Option VertexId None Graph Double Double require tol >= <int> s <string> tol require resetProb >= <int> && resetProb <= <int> s <string> + s <string> resetProb personalized srcId isDefined src VertexId srcId getOrElse <long> pagerankGraph Graph Double Double Double graph outerJoinVertices graph outDegrees vid vdata deg deg getOrElse <int> mapTriplets e <double> / e srcAttr mapVertices id attr id == src <double> Double NegativeInfinity <double> <double> cache initialMessage personalized <double> resetProb / <double> - resetProb vp personalized id VertexId attr Double Double msgSum Double personalizedVertexProgram id attr msgSum id VertexId attr Double Double msgSum Double vertexProgram id attr msgSum rankGraph Pregel pagerankGraph initialMessage activeDirection EdgeDirection Out vp sendMessage messageCombiner mapVertices vid attr attr _1 normalizeRankSum rankGraph personalized 
run VD ClassTag ED ClassTag graph Graph VD ED maxIterations Int Graph VertexId ED require maxIterations > <int> s <string> + s <string> maxIterations ccGraph graph mapVertices vid vid initialMessage Long MaxValue pregelGraph Pregel ccGraph initialMessage maxIterations EdgeDirection Either vprog id attr msg math min attr msg sendMsg sendMessage mergeMsg a b math min a b ccGraph unpersist pregelGraph 
run VD ClassTag ED ClassTag graph Graph VD ED numIter Int Graph VertexId ED require numIter > <int> s <string> + s <string> numIter sccGraph graph mapVertices vid vid sccWorkGraph graph mapVertices vid vid <boolean> cache prevSccGraph sccGraph numVertices sccWorkGraph numVertices iter <int> sccWorkGraph numVertices > <int> && iter < numIter iter += <int> numVertices sccWorkGraph numVertices sccWorkGraph sccWorkGraph outerJoinVertices sccWorkGraph outDegrees vid data degreeOpt degreeOpt isDefined data vid <boolean> outerJoinVertices sccWorkGraph inDegrees vid data degreeOpt degreeOpt isDefined data vid <boolean> cache finalVertices sccWorkGraph vertices filter vid scc isFinal isFinal mapValues vid data data _1 sccGraph sccGraph outerJoinVertices finalVertices vid scc opt opt getOrElse scc cache sccGraph vertices count sccGraph edges count prevSccGraph unpersist prevSccGraph sccGraph sccWorkGraph sccWorkGraph subgraph vpred vid data ! data _2 cache sccWorkGraph numVertices < numVertices iter < numIter sccWorkGraph sccWorkGraph mapVertices vid color isFinal vid isFinal sccWorkGraph Pregel VertexId Boolean ED VertexId sccWorkGraph Long MaxValue activeDirection EdgeDirection Out vid myScc neighborScc math min myScc _1 neighborScc myScc _2 e e srcAttr _1 < e dstAttr _1 Iterator e dstId e srcAttr _1 Iterator vid1 vid2 math min vid1 vid2 sccWorkGraph Pregel VertexId Boolean ED Boolean sccWorkGraph <boolean> activeDirection EdgeDirection In vid myScc existsSameColorFinalNeighbor isColorRoot vid == myScc _1 myScc _1 myScc _2 || isColorRoot || existsSameColorFinalNeighbor e sameColor e dstAttr _1 == e srcAttr _1 onlyDstIsFinal e dstAttr _2 && ! e srcAttr _2 sameColor && onlyDstIsFinal Iterator e srcId e dstAttr _2 Iterator final1 final2 final1 || final2 <unit> sccGraph 
edgeFunc ctx EdgeContext VertexSet ED Int Unit smallSet largeSet ctx srcAttr size < ctx dstAttr size ctx srcAttr ctx dstAttr ctx dstAttr ctx srcAttr iter smallSet iterator counter Int <int> iter hasNext vid iter next vid != ctx srcId && vid != ctx dstId && largeSet contains vid counter += <int> <unit> ctx sendToSrc counter ctx sendToDst counter 
runPreCanonicalized VD ClassTag ED ClassTag graph Graph VD ED Graph Int ED nbrSets VertexRDD VertexSet graph collectNeighborIds EdgeDirection Either mapValues vid nbrs set VertexSet nbrs length i <int> i < nbrs length nbrs i != vid set add nbrs i <unit> i += <int> set setGraph Graph VertexSet ED graph outerJoinVertices nbrSets vid optSet optSet getOrElse <null> edgeFunc ctx EdgeContext VertexSet ED Int Unit smallSet largeSet ctx srcAttr size < ctx dstAttr size ctx srcAttr ctx dstAttr ctx dstAttr ctx srcAttr iter smallSet iterator counter Int <int> iter hasNext vid iter next vid != ctx srcId && vid != ctx dstId && largeSet contains vid counter += <int> <unit> ctx sendToSrc counter ctx sendToDst counter  
edgeListFile sc SparkContext path String canonicalOrientation Boolean <boolean> numEdgePartitions Int <int> edgeStorageLevel StorageLevel StorageLevel MEMORY_ONLY vertexStorageLevel StorageLevel StorageLevel MEMORY_ONLY Graph Int Int startTimeNs System nanoTime lines numEdgePartitions > <int> sc textFile path numEdgePartitions coalesce numEdgePartitions sc textFile path edges lines mapPartitionsWithIndex pid iter builder EdgePartitionBuilder Int Int iter foreach line ! line isEmpty && line <int> != <char> lineArray line split <string> lineArray length < <int> IllegalArgumentException <string> + line <unit> srcId lineArray <int> toLong dstId lineArray <int> toLong canonicalOrientation && srcId > dstId builder add dstId srcId <int> builder add srcId dstId <int> <unit> Iterator pid builder toEdgePartition persist edgeStorageLevel setName <string> format path edges count logInfo s <string> <string> TimeUnit NANOSECONDS toMillis System nanoTime - startTimeNs + <string> GraphImpl fromEdgePartitions edges defaultVertexAttr <int> edgeStorageLevel edgeStorageLevel vertexStorageLevel vertexStorageLevel 
